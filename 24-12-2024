1.Anagram:
PROGRAM:

import java.io.*;
import java.util.*;

public class Solution {

    public static int sherlockAndAnagrams(String s) {
        Map<String, Integer> map = new HashMap<>();
        int count = 0;

        for (int i = 0; i < s.length(); i++) {
            for (int j = i + 1; j <= s.length(); j++) {
                String sub = sortString(s.substring(i, j));
                map.put(sub, map.getOrDefault(sub, 0) + 1);
            }
        }

        for (int value : map.values()) {
            count += (value * (value - 1)) / 2; 
        }

        return count;
    }

    private static String sortString(String str) {
        char[] charArray = str.toCharArray();
        Arrays.sort(charArray);
        return String.valueOf(charArray);
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        for(int a0 = 0; a0 < q; a0++){
            String s = in.next();
            int result = sherlockAndAnagrams(s);
            System.out.println(result);
        }
    }
}
===============================================================================
2.Given the price of each flavor of ice cream, select two flavors whose sum equals a given money amount.
PROGRAM:

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for(int a0 = 0; a0 < t; a0++){
            int m = in.nextInt();
            int n = in.nextInt();
            int[] arr = new int[n];
            for(int arr_i = 0; arr_i < n; arr_i++){
                arr[arr_i] = in.nextInt();
            }
            int[] result = icecreamParlor(m, arr);
            for (int i = 0; i < result.length; i++) {
                System.out.print(result[i] + (i != result.length - 1 ? " " : ""));
            }
            System.out.println("");
        }
    }

    static int[] icecreamParlor(int m, int[] arr) {
        Map<Integer, Integer> map = new HashMap<>(); 
        for (int i = 0; i < arr.length; i++) {
            int complement = m - arr[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement) + 1, i + 1}; 
            }
            map.put(arr[i], i); 
        }
        return null; 
    }
}
============================================================================
3.Storing 2D array:
PROGRAM:

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int arr[][] = new int[6][6];
        for(int arr_i=0; arr_i < 6; arr_i++){
            for(int arr_j=0; arr_j < 6; arr_j++){
                arr[arr_i][arr_j] = in.nextInt();
            }
        }
        int maxSum = Integer.MIN_VALUE;
        for(int i=0; i<4; i++){
            for(int j=0; j<4; j++){
                int sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] 
                        + arr[i+1][j+1] 
                        + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2];
                maxSum = Math.max(maxSum, sum);
            }
        }
        System.out.println(maxSum);
    }
}
====================================================================
4.Merge two sorted array:
PROGRAM:

public class MergeSortedArrays {

    public static int[] merge(int[] nums1, int m, int[] nums2, int n) {
        int[] merged = new int[m + n];
        int i = 0, j = 0, k = 0;

        while (i < m && j < n) {
            if (nums1[i] <= nums2[j]) {
                merged[k++] = nums1[i++];
            } else {
                merged[k++] = nums2[j++];
            }
        }

        while (i < m) {
            merged[k++] = nums1[i++];
        }

        while (j < n) {
            merged[k++] = nums2[j++];
        }

        return merged;
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3, 0, 0, 0};
        int m = 3;
        int[] nums2 = {2, 5, 6};
        int n = 3;

        int[] merged = merge(nums1, m, nums2, n);
        for (int num : merged) {
            System.out.print(num + " ");
        }
    }
}
=====================================================
